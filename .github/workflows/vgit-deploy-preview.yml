name: Reusable Deploy Preview

on:
  workflow_call:
    inputs:
      branch_name:
        description: 'Branch to deploy'
        required: true
        type: string
      username:
        description: 'GitHub username'
        required: true
        type: string
      project_name:
        description: 'Project name'
        required: true
        type: string
      deployment_type:
        description: 'Type of deployment'
        required: false
        type: string
        default: 'preview'
      commit_sha:
        description: 'Commit SHA to deploy'
        required: false
        type: string
    secrets:
      NETLIFY_AUTH_TOKEN:
        required: true
      NETLIFY_SITE_ID:
        required: true
      UPLOADCARE_PUBLIC_KEY:
        required: true
    outputs:
      preview_url:
        description: "The deployment URL"
        value: ${{ jobs.deploy.outputs.preview_url }}
      screenshot_url:
        description: "The screenshot CDN URL"
        value: ${{ jobs.deploy.outputs.screenshot_url }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write       # For git operations and commit message updates
      id-token: write       # For potential future integrations
      actions: read         # For workflow operations
    outputs:
      preview_url: ${{ steps.extract-url.outputs.preview_url }}
      screenshot_url: ${{ steps.screenshot.outputs.screenshot_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch_name }}
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f "package.json" ]; then
            echo "üì¶ Installing dependencies..."
            npm install
          else
            echo "‚ö†Ô∏è No package.json found, skipping dependency installation"
          fi

      - name: Build project
        run: |
          echo "üèóÔ∏è Building project..."
          
          # Check if this is a web project that can be deployed
          if [ -f "package.json" ] && grep -q '"build"' package.json; then
            echo "üì¶ Web project detected, building..."
            npm run build && {
              echo "PREVIEW_BUILD_SUCCESS=true" >> $GITHUB_ENV
              echo "‚úÖ Build successful"
            } || {
              echo "‚ùå Build failed"
              exit 1
            }
          else
            echo "‚ÑπÔ∏è No build script found or not a web project, skipping build"
            echo "PREVIEW_BUILD_SUCCESS=false" >> $GITHUB_ENV
          fi

      - name: Detect build output directory
        if: env.PREVIEW_BUILD_SUCCESS == 'true'
        run: |
          echo "üìÅ Detecting build output directory..."
          
          # Check for custom build directory from secret first
          if [ -n "${{ secrets.CUSTOM_BUILD_DIR }}" ]; then
            CUSTOM_DIR="${{ secrets.CUSTOM_BUILD_DIR }}"
            if [ -d "$CUSTOM_DIR" ] && [ "$(ls -A $CUSTOM_DIR 2>/dev/null)" ]; then
              BUILD_DIR="$CUSTOM_DIR"
              echo "BUILD_DIR=$CUSTOM_DIR" >> $GITHUB_ENV
              echo "‚úÖ Using custom build directory: $CUSTOM_DIR"
              exit 0
            else
              echo "‚ö†Ô∏è Custom build directory '$CUSTOM_DIR' not found or empty, falling back to auto-detection"
            fi
          fi
          
          # Auto-detect common build output directories
          BUILD_DIRS=("dist" "build" "_site" "out" ".next" "public")
          
          for dir in "${BUILD_DIRS[@]}"; do
            if [ -d "$dir" ] && [ "$(ls -A $dir 2>/dev/null)" ]; then
              BUILD_DIR="$dir"
              echo "BUILD_DIR=$dir" >> $GITHUB_ENV
              echo "‚úÖ Build output directory found: $dir"
              break
            fi
          done
          
          # If no build directory found, use current directory for static sites
          if [ -z "${BUILD_DIR:-}" ]; then
            if [ -f "index.html" ]; then
              BUILD_DIR="."
              echo "BUILD_DIR=." >> $GITHUB_ENV
              echo "‚úÖ Using current directory for static site"
            else
              echo "‚ùå No build output directory found"
              exit 1
            fi
          fi

      - name: Deploy to Netlify
        id: netlify-deploy
        if: env.PREVIEW_BUILD_SUCCESS == 'true'
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=${{ env.BUILD_DIR }} ${{ inputs.deployment_type == 'production' && '--prod' || format('--alias={0}', inputs.branch_name) }} --json
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: Extract Netlify deployment URL
        id: extract-url
        if: env.PREVIEW_BUILD_SUCCESS == 'true'
        run: |
          # Extract deployment URL from Netlify action output
          DEPLOY_URL="${{ steps.netlify-deploy.outputs.NETLIFY_URL }}"
          
          # If the action output is empty, try parsing the raw output
          if [ -z "$DEPLOY_URL" ]; then
            echo "‚ö†Ô∏è No URL from action outputs, checking for alternative sources..."
            DEPLOY_URL="$NETLIFY_URL"
          fi
          
          if [ -n "$DEPLOY_URL" ]; then
            echo "‚úÖ Deployed: $DEPLOY_URL"
            echo "PREVIEW_URL=$DEPLOY_URL" >> $GITHUB_ENV
            echo "preview_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è No deployment URL received from Netlify"
            echo "preview_url=" >> $GITHUB_OUTPUT
          fi

      - name: Install Playwright browsers
        if: env.PREVIEW_URL != ''
        run: |
          echo "üì∏ Installing Playwright browser for screenshot generation..."
          npx playwright install chromium --with-deps

      - name: Generate screenshot and upload to CDN
        id: screenshot
        if: env.PREVIEW_URL != ''
        run: |
          echo "üì∏ Generating screenshot of deployed site..."
          
          # Wait for deployment to be ready
          sleep 5
          
          # Create screenshot script
          cat > screenshot.js << 'EOF'
          import { chromium } from 'playwright';
          import FormData from 'form-data';
          import fetch from 'node-fetch';
          import fs from 'fs';
          
          (async () => {
            console.log('üöÄ Launching browser...');
            const browser = await chromium.launch({ 
              headless: true,
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-gpu'
              ]
            });
            
            const page = await browser.newPage();
            await page.setViewportSize({ width: 1280, height: 720 });
            
            console.log('üìÑ Navigating to:', process.env.PREVIEW_URL);
            await page.goto(process.env.PREVIEW_URL, { 
              waitUntil: 'networkidle',
              timeout: 60000 
            });
            
            // Wait for page to stabilize
            await page.waitForTimeout(2000);
            
            console.log('üì∏ Capturing screenshot...');
            const screenshot = await page.screenshot({ 
              type: 'jpeg',
              fullPage: true,
              quality: 90 
            });
            
            await browser.close();
            
            // Upload to Uploadcare
            console.log('‚òÅÔ∏è Uploading to Uploadcare CDN...');
            
            const form = new FormData();
            form.append('UPLOADCARE_PUB_KEY', process.env.UPLOADCARE_PUBLIC_KEY);
            form.append('file', screenshot, {
              filename: 'screenshot.jpg',
              contentType: 'image/jpeg'
            });
            
            const response = await fetch('https://upload.uploadcare.com/base/', {
              method: 'POST',
              body: form
            });
            
            const result = await response.json();
            if (result.file) {
              const cdnUrl = `https://ucarecdn.com/${result.file}/`;
              console.log('‚úÖ Screenshot uploaded:', cdnUrl);
              console.log(`SCREENSHOT_URL=${cdnUrl}`);
              
              // Set environment variable and output for next steps
              fs.appendFileSync(process.env.GITHUB_ENV, `SCREENSHOT_URL=${cdnUrl}\n`);
              fs.appendFileSync(process.env.GITHUB_OUTPUT, `screenshot_url=${cdnUrl}\n`);
            } else {
              console.error('‚ùå Upload failed:', result);
              process.exit(1);
            }
          })();
          EOF
          
          # Install required packages
          npm install playwright form-data node-fetch@2
          
          # Run screenshot script
          node screenshot.js || {
            echo "‚ö†Ô∏è Screenshot generation failed, but deployment was successful"
            echo "SCREENSHOT_URL=" >> $GITHUB_ENV
            echo "screenshot_url=" >> $GITHUB_OUTPUT
          }
        env:
          UPLOADCARE_PUBLIC_KEY: ${{ secrets.UPLOADCARE_PUBLIC_KEY }}

      - name: Update commit with preview info (if applicable)
        if: env.PREVIEW_URL != ''
        run: |
          echo "üìù Adding preview info to commit..."
          
          # Get current commit message
          CURRENT_MSG=$(git log -1 --pretty=%B)
          
          # Check if preview info already exists
          if echo "$CURRENT_MSG" | grep -q "Preview:"; then
            echo "‚ÑπÔ∏è Commit already contains preview info, skipping update"
          else
            # Append preview information to commit message
            UPDATED_COMMIT_MSG="$CURRENT_MSG
          
          ---PREVIEW-INFO---
          Preview URL: ${{ env.PREVIEW_URL }}
          Screenshot URL: ${{ env.SCREENSHOT_URL }}
          "
            
            git commit --amend -m "$UPDATED_COMMIT_MSG"
            git push origin "${{ inputs.branch_name }}" --force-with-lease || {
              echo "‚ö†Ô∏è Failed to update commit message, but deployment was successful"
            }
          fi

      - name: Summary
        run: |
          echo "üéâ Deployment completed successfully!"
          echo ""
          echo "üìã Summary:"
          echo "- Branch: ${{ inputs.branch_name }}"
          echo "- Deployment Type: ${{ inputs.deployment_type }}"
          echo "- Repository: ${{ github.repository }}"
          if [ -n "${{ env.PREVIEW_URL }}" ]; then
            echo "- Deployment URL: ${{ env.PREVIEW_URL }}"
          fi
          if [ -n "${{ env.SCREENSHOT_URL }}" ]; then
            echo "- Screenshot URL: ${{ env.SCREENSHOT_URL }}"
          fi
          echo "- Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
